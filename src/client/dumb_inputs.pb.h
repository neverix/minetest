// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/dumb_inputs.proto

#ifndef PROTOBUF_INCLUDED_client_2fdumb_5finputs_2eproto
#define PROTOBUF_INCLUDED_client_2fdumb_5finputs_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_client_2fdumb_5finputs_2eproto 

namespace protobuf_client_2fdumb_5finputs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_client_2fdumb_5finputs_2eproto
class InputAction;
class InputActionDefaultTypeInternal;
extern InputActionDefaultTypeInternal _InputAction_default_instance_;
class KeyboardEvent;
class KeyboardEventDefaultTypeInternal;
extern KeyboardEventDefaultTypeInternal _KeyboardEvent_default_instance_;
namespace google {
namespace protobuf {
template<> ::InputAction* Arena::CreateMaybeMessage<::InputAction>(Arena*);
template<> ::KeyboardEvent* Arena::CreateMaybeMessage<::KeyboardEvent>(Arena*);
}  // namespace protobuf
}  // namespace google

enum EventType {
  PRESS = 0,
  RELEASE = 1,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = PRESS;
const EventType EventType_MAX = RELEASE;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class InputAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InputAction) */ {
 public:
  InputAction();
  virtual ~InputAction();

  InputAction(const InputAction& from);

  inline InputAction& operator=(const InputAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputAction(InputAction&& from) noexcept
    : InputAction() {
    *this = ::std::move(from);
  }

  inline InputAction& operator=(InputAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InputAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputAction* internal_default_instance() {
    return reinterpret_cast<const InputAction*>(
               &_InputAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InputAction* other);
  friend void swap(InputAction& a, InputAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputAction* New() const final {
    return CreateMaybeMessage<InputAction>(NULL);
  }

  InputAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputAction& from);
  void MergeFrom(const InputAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KeyboardEvent keyEvents = 1;
  int keyevents_size() const;
  void clear_keyevents();
  static const int kKeyEventsFieldNumber = 1;
  ::KeyboardEvent* mutable_keyevents(int index);
  ::google::protobuf::RepeatedPtrField< ::KeyboardEvent >*
      mutable_keyevents();
  const ::KeyboardEvent& keyevents(int index) const;
  ::KeyboardEvent* add_keyevents();
  const ::google::protobuf::RepeatedPtrField< ::KeyboardEvent >&
      keyevents() const;

  // sint32 mouseDx = 2;
  void clear_mousedx();
  static const int kMouseDxFieldNumber = 2;
  ::google::protobuf::int32 mousedx() const;
  void set_mousedx(::google::protobuf::int32 value);

  // sint32 mouseDy = 3;
  void clear_mousedy();
  static const int kMouseDyFieldNumber = 3;
  ::google::protobuf::int32 mousedy() const;
  void set_mousedy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InputAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KeyboardEvent > keyevents_;
  ::google::protobuf::int32 mousedx_;
  ::google::protobuf::int32 mousedy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_client_2fdumb_5finputs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyboardEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyboardEvent) */ {
 public:
  KeyboardEvent();
  virtual ~KeyboardEvent();

  KeyboardEvent(const KeyboardEvent& from);

  inline KeyboardEvent& operator=(const KeyboardEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyboardEvent(KeyboardEvent&& from) noexcept
    : KeyboardEvent() {
    *this = ::std::move(from);
  }

  inline KeyboardEvent& operator=(KeyboardEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyboardEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyboardEvent* internal_default_instance() {
    return reinterpret_cast<const KeyboardEvent*>(
               &_KeyboardEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KeyboardEvent* other);
  friend void swap(KeyboardEvent& a, KeyboardEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyboardEvent* New() const final {
    return CreateMaybeMessage<KeyboardEvent>(NULL);
  }

  KeyboardEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyboardEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyboardEvent& from);
  void MergeFrom(const KeyboardEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyboardEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .EventType eventType = 2;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::EventType eventtype() const;
  void set_eventtype(::EventType value);

  // @@protoc_insertion_point(class_scope:KeyboardEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  int eventtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_client_2fdumb_5finputs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputAction

// repeated .KeyboardEvent keyEvents = 1;
inline int InputAction::keyevents_size() const {
  return keyevents_.size();
}
inline void InputAction::clear_keyevents() {
  keyevents_.Clear();
}
inline ::KeyboardEvent* InputAction::mutable_keyevents(int index) {
  // @@protoc_insertion_point(field_mutable:InputAction.keyEvents)
  return keyevents_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KeyboardEvent >*
InputAction::mutable_keyevents() {
  // @@protoc_insertion_point(field_mutable_list:InputAction.keyEvents)
  return &keyevents_;
}
inline const ::KeyboardEvent& InputAction::keyevents(int index) const {
  // @@protoc_insertion_point(field_get:InputAction.keyEvents)
  return keyevents_.Get(index);
}
inline ::KeyboardEvent* InputAction::add_keyevents() {
  // @@protoc_insertion_point(field_add:InputAction.keyEvents)
  return keyevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KeyboardEvent >&
InputAction::keyevents() const {
  // @@protoc_insertion_point(field_list:InputAction.keyEvents)
  return keyevents_;
}

// sint32 mouseDx = 2;
inline void InputAction::clear_mousedx() {
  mousedx_ = 0;
}
inline ::google::protobuf::int32 InputAction::mousedx() const {
  // @@protoc_insertion_point(field_get:InputAction.mouseDx)
  return mousedx_;
}
inline void InputAction::set_mousedx(::google::protobuf::int32 value) {
  
  mousedx_ = value;
  // @@protoc_insertion_point(field_set:InputAction.mouseDx)
}

// sint32 mouseDy = 3;
inline void InputAction::clear_mousedy() {
  mousedy_ = 0;
}
inline ::google::protobuf::int32 InputAction::mousedy() const {
  // @@protoc_insertion_point(field_get:InputAction.mouseDy)
  return mousedy_;
}
inline void InputAction::set_mousedy(::google::protobuf::int32 value) {
  
  mousedy_ = value;
  // @@protoc_insertion_point(field_set:InputAction.mouseDy)
}

// -------------------------------------------------------------------

// KeyboardEvent

// string key = 1;
inline void KeyboardEvent::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyboardEvent::key() const {
  // @@protoc_insertion_point(field_get:KeyboardEvent.key)
  return key_.GetNoArena();
}
inline void KeyboardEvent::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyboardEvent.key)
}
#if LANG_CXX11
inline void KeyboardEvent::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyboardEvent.key)
}
#endif
inline void KeyboardEvent::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyboardEvent.key)
}
inline void KeyboardEvent::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyboardEvent.key)
}
inline ::std::string* KeyboardEvent::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:KeyboardEvent.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyboardEvent::release_key() {
  // @@protoc_insertion_point(field_release:KeyboardEvent.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyboardEvent::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:KeyboardEvent.key)
}

// .EventType eventType = 2;
inline void KeyboardEvent::clear_eventtype() {
  eventtype_ = 0;
}
inline ::EventType KeyboardEvent::eventtype() const {
  // @@protoc_insertion_point(field_get:KeyboardEvent.eventType)
  return static_cast< ::EventType >(eventtype_);
}
inline void KeyboardEvent::set_eventtype(::EventType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:KeyboardEvent.eventType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EventType>() {
  return ::EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_client_2fdumb_5finputs_2eproto
